<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:task="http://www.springframework.org/schema/task"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-3.2.xsd
    ">
    
	<context:property-placeholder order="1"
    ignore-unresolvable="true" location="classpath:META-INF/database.properties" />
  <!-- <context:property-placeholder order="2"
    system-properties-mode="OVERRIDE" location="classpath:META-INF/cmsstager.properties" />
 -->
  <!-- Task Scheduler with default poolSize=1 -->
  <!-- <task:scheduler id="cmsstagerScheduler"/> -->

  <!-- Executor to support process SyncObject simultaneously. Normally when doing a full sync, one
       LocalStager will send SyncObject in parallel, using 4 threads. So set the maxPoolSize to 40
       so it can support 10 LocalStagers in parallel. -->
  <!-- <bean id="cmsstagerExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    <property name="corePoolSize" value="5" />
    <property name="maxPoolSize" value="40" />
  </bean> -->

  <!-- bean post-processor for JPA annotations -->
  <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

  <bean id="myEmf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <!-- Use container DataSource via JNDI lookup -->
    <property name="dataSource" ref="dataSource"/>
    <!-- <property name="persistenceUnitName" value="cmsstager"/> -->
    <property name="packagesToScan" value="com.keven.model"/>
    <property name="jpaVendorAdapter">
      <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="showSql" value="false" />
        <property name="generateDdl" value="true" />
      </bean>
    </property>
    <property name="jpaPropertyMap">
      <map>
      <entry key="hibernate.show_sql" value="${hibernate.show_sql}" />
      <entry key="hibernate.hbm2ddl.auto" value="${hibernate.hbm2ddl.auto}" />
      <entry key="hibernate.dialect" value="${hibernate.dialect}" />
      </map>
    </property>
  </bean>

  <!-- datasource in JNDI container e.g. JBoss or Tomcat -->
  <!-- <bean id="sxaDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:jboss/datasources/SXA_DS"/>
  </bean> -->
  <bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
        <property name="driverClassName" value="org.postgresql.Driver"/>
        <property name="url" value="jdbc:postgresql://localhost:5432/myproject"/>
        <property name="username" value="dbtest"/>
        <property name="password" value="dbtest"/>
        <!-- <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        <property name="testWhileIdle" value="true"/>
        <property name="timeBetweenEvictionRunsMillis" value="1800000"/>
        <property name="numTestsPerEvictionRun" value="3"/>
        <property name="minEvictableIdleTimeMillis" value="1800000"/>
        <property name="validationQuery" value="SELECT version();"/> -->
    </bean>

  <!-- enable the configuration of transactional behavior based on annotations -->
  <tx:annotation-driven transaction-manager="myTxManager"/>
  <bean id="myTxManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="myEmf" />
  </bean>

  <context:component-scan base-package="com.keven"/>
  
  

	<!-- <bean id="customerBo" class="com.keven.customer.impl.CustomerBoImpl"></bean> -->
	
	<!-- <bean class="com.keven.context.SpringApplicationContext"></bean> -->

</beans>